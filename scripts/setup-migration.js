#!/usr/bin/env node

/**
 * Migration Setup Script
 * Helps configure the product migration environment
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

function question(prompt) {
    return new Promise((resolve) => {
        rl.question(prompt, resolve);
    });
}

async function setupMigration() {
    console.log('üöÄ Product Migration Setup');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log('This script will help you configure the product migration environment.\n');

    try {
        // Get development database URI
        console.log('üìã Development Database Configuration');
        const devUri = await question('Enter your development MongoDB URI: ');

        if (!devUri.trim()) {
            console.log('‚ùå Development URI is required');
            process.exit(1);
        }

        // Get production database URI
        console.log('\nüìã Production Database Configuration');
        const prodUri = await question('Enter your production MongoDB URI: ');

        if (!prodUri.trim()) {
            console.log('‚ùå Production URI is required');
            process.exit(1);
        }

        // Create migration.env file
        const envContent = `# Product Migration Environment Variables
# Generated by setup-migration.js

# Development Database (source)
DEV_MONGODB_URI=${devUri.trim()}

# Production Database (destination)
PROD_MONGODB_URI=${prodUri.trim()}
`;

        const envPath = path.join(__dirname, '..', 'migration.env');
        fs.writeFileSync(envPath, envContent);

        console.log('\n‚úÖ Configuration saved to migration.env');
        console.log('\nüìã Next Steps:');
        console.log('1. Review the migration.env file to ensure the URIs are correct');
        console.log('2. Backup your production database (recommended)');
        console.log('3. Run the migration: npm run migrate:products');
        console.log('\n‚ö†Ô∏è  WARNING: This will copy all products from development to production!');
        console.log('Products with existing SKUs will be skipped automatically.');

    } catch (error) {
        console.error('‚ùå Setup failed:', error.message);
        process.exit(1);
    } finally {
        rl.close();
    }
}

// Handle process termination
process.on('SIGINT', () => {
    console.log('\n‚ö†Ô∏è  Setup cancelled by user');
    rl.close();
    process.exit(0);
});

setupMigration();
